#!/usr/bin/python3
# COMP3311 21T3 Ass2 ... print list of rules for a program or stream

import sys
import psycopg2
import re
from helpers import getProgram, getStream, printOfferedByName, getProgramRules, getStreamRules, getStreamId, getRuleInfo, printAOGInfo

# define any local helper functions here
# ...

### set up some globals

usage = f"Usage: {sys.argv[0]} (ProgramCode|StreamCode)"
db = None

### process command-line args

argc = len(sys.argv)
if argc < 2:
  print(usage)
  exit(1)
code = sys.argv[1]
if len(code) == 4:
  codeOf = "program"
elif len(code) == 6:
  codeOf = "stream"

try:
  db = psycopg2.connect("dbname=mymyunsw")
  if codeOf == "program":
    progInfo = getProgram(db,code)
    if not progInfo:
      print(f"Invalid program code {code}")
      exit()
    # List the rules for Program
    tup = getProgram(db, code)
    # print program information
    name = tup[1] + ' ' + tup[2]
    uoc = str(tup[3]) + ' UOC'
    length = str(tup[6] / 12) + ' years'
    faculty = str(tup[4])
    print(f"{name}, {uoc}, {length}")
    printOfferedByName(db, faculty)
    # find and print academic requirements for the program
    print("Academic Requirements:")
    rule_ids = getProgramRules(db, code)
    for rule in rule_ids:
      info = getRuleInfo(db, rule)
      if info[1] == 'DS':
        print(f"1 stream(s) from {info[0]}")
      elif info[1] == 'GE':
        print(f"12 UOC of {info[0]}") 
      elif info[0] == "Industrial Training":
        print(info[0])
      else:
        print(f"all courses from {info[0]}")
      printAOGInfo(db, info[4])
  elif codeOf == "stream":
    strmInfo = getStream(db,code)
    if not strmInfo:
      print(f"Invalid stream code {code}")
      exit()
    # List the rules for Stream
    tup = getStream(db, code)
    # print stream information
    name = tup[1] + ' ' + tup[2]
    faculty = str(tup[3])
    print(f"{name}")
    printOfferedByName(db, faculty)
    stream_id = getStreamId(db, code)
    # find and print academic requirements for the program
    print("Academic Requirements:")
    rule_ids = getStreamRules(db, stream_id)
    for rule in rule_ids:
      info = getRuleInfo(db, rule)
      if info[1] == 'PE':
        if info[2] is not None and info[3] is None:
          print(f"at least {info[2]} UOC courses from {info[0]}")
        elif info[2] is None and info[3] is not None:
          print(f"up to {info[3]} UOC courses from {info[0]}")
        elif info[2] == info[3]:
          print(f"{info[2]} UOC courses from {info[0]}")
        else:
          print(f"between {info[2]} and {info[3]} UOC courses from {info[0]}")
      elif info[1] == 'FE':
        print(f"at least {info[2]} UOC of Free Electives")
      elif info[1] == 'GE':
        print(f"12 UOC of {info[0]}") 
      elif info[0] == "Industrial Training":
        print(info[0])
      else:
        print(f"{info[0]}")
      if info[1] != 'FE':
        printAOGInfo(db, info[4])

except Exception as err:
  print(err)
finally:
  if db:
    db.close()
